#include<bits/stdc++.h>
using namespace std;

bool IsKnightSafe(int **arr,int i,int j,int tq)
{
    if(i-1>=0 && j-2>=0 && arr[i-1][j-2])
    {
        return false;
    }
    
    if(i-2>=0 && j-1>=0 && arr[i-2][j-1])
    {
        return false;
    }
    
    if(i-2>=0 && j+1<tq && arr[i-2][j+1])
    {
        return false;
    }
    
    if(i-1>=0 && j+2<tq && arr[i-1][j+2])
    {
        return false;
    }
    
    return true;
}
void knightCombinations(int qpsf, int tq, int **arr,int lcno)
{
    if(qpsf==tq)
    {
        for(int row=0;row<tq;row++)
        {
            for(int col=0;col<tq;col++)
            {
                if(arr[row][col]==1)
                {
                    cout<<"k	";
                }
                else
                {
                    cout<<"-	";
                }
            }
            cout<<endl;
        }
        cout<<endl;
        return;
    }
    
    for(int cell=lcno+1;cell<tq*tq;cell++)
    {
        int row=cell/tq;
        int col=cell%tq;
        
        if(arr[row][col]==0 && IsKnightSafe(arr,row,col,tq))
        {
            arr[row][col]=1;
        knightCombinations(qpsf+1,tq,arr,cell);
        arr[row][col]=0;
        }
    }
}

int main()
{
    int n;cin>>n;
    
    int **arr;
    arr = new int *[n];
    for(int i=0;i<n;i++)
    arr[i]=new int[n];
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            arr[i][j]=0;
        }
    }
    knightCombinations(0, n, arr, -1);
}
